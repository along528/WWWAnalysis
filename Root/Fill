./TestFakes.cxx.save:      m_mHistograms[("difake_mll_"+name).c_str()][channel]->Fill(mass/1000.0, weight);
./TestFakes.cxx.save:      m_mHistograms[("fake_mll_"+name).c_str()][channel]->Fill(mass/1000.0, weight);
./TestFakes.cxx.save:	  m_mHistograms[("zll_"+name).c_str()][channel]->Fill((*m_oInput.Lep_pt[1])/1000.0, weight);
./TestFakes.cxx.save:	  m_mHistograms[("zll_"+name).c_str()][channel]->Fill((*m_oInput.Lep_pt[1])/1000.0, weight);
./TestFakes.cxx.save:	  m_mHistograms[("fake_"+name).c_str()][channel]->Fill((*m_oInput.Lep_pt[1])/1000.0, weight);
./Recalculate.cxx.save:			hist->SetFillColor(0);
./Recalculate.cxx.save:	  m_pClone->Fill();
./Recalculate.cxx.save:    m_pVBFClone->Fill();
./Recalculate.cxx.save:    m_pVHClone->Fill();
./Recalculate.cxx.save:    m_pBoostedClone->Fill();
./Recalculate.cxx.save:    m_p1JetClone->Fill();
./Recalculate.cxx.save://    m_p0JetClone->Fill();
./Recalculate.cxx.save:      m_mHistograms["Mass_Hj_mva"][channel]->Fill(*m_oInput.Mass_Hj/1000, weight);
./Recalculate.cxx.save:      m_mHistograms["DeltaR_ll_mva"][channel]->Fill(*m_oInput.DeltaR_ll, weight);
./Recalculate.cxx.save:      m_mHistograms["Ratio_pt_mva"][channel]->Fill(*m_oInput.Lep_pt[0]/(*m_oInput.Lep_pt[1]), weight);
./Recalculate.cxx.save:        m_mHistograms["Colinear_mva"][channel]->Fill(*m_oInput.ColinearMass/1000, weight);
./Recalculate.cxx.save:        m_mHistograms["MMC_mva"][channel]->Fill(*m_oInput.MmcMass/1000, weight);
./Recalculate.cxx.save:          m_mHistograms["Colinear_mva_df"][channel]->Fill(*m_oInput.ColinearMass/1000, weight);
./Recalculate.cxx.save:          m_mHistograms["Colinear_mva_sf"][channel]->Fill(*m_oInput.ColinearMass/1000, weight);
./Recalculate.cxx.save:      m_mHistograms["Mass_Hj_vbf"][channel]->Fill(*m_oInput.Mass_Hj/1000, weight);
./Recalculate.cxx.save:      m_mHistograms["DeltaR_ll_vbf"][channel]->Fill(*m_oInput.DeltaR_ll, weight);
./Recalculate.cxx.save:      m_mHistograms["Ratio_pt_vbf"][channel]->Fill(*m_oInput.Lep_pt[0]/(*m_oInput.Lep_pt[1]), weight);
./Recalculate.cxx.save:        m_mHistograms["Colinear_vbf"][channel]->Fill(*m_oInput.ColinearMass/1000, weight);
./Recalculate.cxx.save:        m_mHistograms["MMC_vbf"][channel]->Fill(*m_oInput.MmcMass/1000, weight);
./Recalculate.cxx.save:          m_mHistograms["Colinear_vbf_df"][channel]->Fill(*m_oInput.ColinearMass/1000, weight);
./Recalculate.cxx.save:          m_mHistograms["Colinear_vbf_sf"][channel]->Fill(*m_oInput.ColinearMass/1000, weight);
./Recalculate.cxx.save:      m_mHistograms["Mass_Hj_boosted"][channel]->Fill(*m_oInput.Mass_Hj/1000, weight);
./Recalculate.cxx.save:      m_mHistograms["DeltaR_ll_boosted"][channel]->Fill(*m_oInput.DeltaR_ll, weight);
./Recalculate.cxx.save:      m_mHistograms["Ratio_pt_boosted"][channel]->Fill(*m_oInput.Lep_pt[0]/(*m_oInput.Lep_pt[1]), weight);
./Recalculate.cxx.save:        m_mHistograms["Colinear_boosted"][channel]->Fill(*m_oInput.ColinearMass/1000, weight);
./Recalculate.cxx.save:        m_mHistograms["MMC_boosted"][channel]->Fill(*m_oInput.MmcMass/1000, weight);
./Recalculate.cxx.save:          m_mHistograms["Colinear_boosted_df"][channel]->Fill(*m_oInput.ColinearMass/1000, weight);
./Recalculate.cxx.save:          m_mHistograms["Colinear_boosted_sf"][channel]->Fill(*m_oInput.ColinearMass/1000, weight);
./Recalculate.cxx.save:      m_mHistograms["Mass_Hj_1jet"][channel]->Fill(*m_oInput.Mass_Hj/1000, weight);
./Recalculate.cxx.save:      m_mHistograms["DeltaR_ll_1jet"][channel]->Fill(*m_oInput.DeltaR_ll, weight);
./Recalculate.cxx.save:      m_mHistograms["Ratio_pt_1jet"][channel]->Fill(*m_oInput.Lep_pt[0]/(*m_oInput.Lep_pt[1]), weight);
./Recalculate.cxx.save:        m_mHistograms["Colinear_1jet"][channel]->Fill(*m_oInput.ColinearMass/1000, weight);
./Recalculate.cxx.save:        m_mHistograms["MMC_1jet"][channel]->Fill(*m_oInput.MmcMass/1000, weight);
./Recalculate.cxx.save:          m_mHistograms["Colinear_1jet_df"][channel]->Fill(*m_oInput.ColinearMass/1000, weight);
./Recalculate.cxx.save:          m_mHistograms["Colinear_1jet_sf"][channel]->Fill(*m_oInput.ColinearMass/1000, weight);
./Recalculate.cxx.save:      m_mHistograms["Mass_Hj_0jet"][channel]->Fill(*m_oInput.Mass_Hj/1000, weight0);
./Recalculate.cxx.save:      m_mHistograms["DeltaR_ll_0jet"][channel]->Fill(*m_oInput.DeltaR_ll, weight0);
./Recalculate.cxx.save:      m_mHistograms["Ratio_pt_0jet"][channel]->Fill(*m_oInput.Lep_pt[0]/(*m_oInput.Lep_pt[1]), weight0);
./Recalculate.cxx.save:        m_mHistograms["Colinear_0jet"][channel]->Fill(*m_oInput.ColinearMass/1000, weight0);
./Recalculate.cxx.save:        m_mHistograms["MMC_0jet"][channel]->Fill(*m_oInput.MmcMass/1000, weight0);
./Recalculate.cxx.save:          m_mHistograms["Colinear_0jet_df"][channel]->Fill(*m_oInput.ColinearMass/1000, weight0);
./Recalculate.cxx.save:          m_mHistograms["Colinear_0jet_sf"][channel]->Fill(*m_oInput.ColinearMass/1000, weight0);
./Recalculate.cxx.save:	      m_mHistograms[("test_Pt_lep"+suffixk).c_str()][channel]->Fill(*m_oInput.Lep_pt[k]/1000,w);
./Recalculate.cxx.save:	      m_mHistograms[("test_Eta_lep"+suffixk).c_str()][channel]->Fill(*m_oInput.Lep_eta[k],w);
./Recalculate.cxx.save:	      m_mHistograms[("test_Phi_lep"+suffixk).c_str()][channel]->Fill(*m_oInput.Lep_phi[k],w);
./Recalculate.cxx.save:	        m_mHistograms[("test_Pt_jet"+suffixk).c_str()][channel]->Fill(*m_oInput.Jet_pt[k]/1000,w);
./Recalculate.cxx.save:	        m_mHistograms[("test_Eta_jet"+suffixk).c_str()][channel]->Fill(*m_oInput.Jet_eta[k],w);
./Recalculate.cxx.save:	        m_mHistograms[("test_Phi_jet"+suffixk).c_str()][channel]->Fill(*m_oInput.Jet_phi[k],w);
./Recalculate.cxx.save:	    m_mHistograms[("test_Et_HPTO_MET_"+suffix).c_str()][channel]->Fill(*m_oInput.MET_HPTO_Et/1000,w);
./Recalculate.cxx.save:	    m_mHistograms[("test_Ht_HPTO_MET_"+suffix).c_str()][channel]->Fill(ht/1000,w);
./Recalculate.cxx.save:    	m_mHistograms[("test_Phi_HPTO_MET_"+suffix).c_str()][channel]->Fill(*m_oInput.MET_HPTO_phi,w);
./Recalculate.cxx.save:  	m_mHistograms[("sumcos_db"+bstr[b]).c_str()][channel]->Fill(*m_oInput.SumCos, weight0);
./Recalculate.cxx.save:	hist1->Fill((*m_oInput.Mass_ll)/1000, weight0);
./Recalculate.cxx.save:	m_mHistograms[("mu_c1"+bstr[b]).c_str()][channel]->Fill(m_oInput.mu,weight0);
./Recalculate.cxx.save:	m_mHistograms[("nPV_3trks_c1"+bstr[b]).c_str()][channel]->Fill(m_oInput.nPV_3trks,weight0);
./Recalculate.cxx.save:		m_mHistograms[("DeltaPhi_em_c2d"+bstr[b]).c_str()][channel]->Fill(m_oInput.DeltaPhi_ll, weight0);
./Recalculate.cxx.save:	m_mHistograms[("mu_c2"+bstr[b]).c_str()][channel]->Fill(m_oInput.mu,weight0);
./Recalculate.cxx.save:	m_mHistograms[("nPV_3trks_c2"+bstr[b]).c_str()][channel]->Fill(m_oInput.nPV_3trks,weight0);
./Recalculate.cxx.save:	m_mHistograms[("NJet_pt40_c2"+bstr[b]).c_str()][channel]->Fill(m_oInput.NJet40, weight0);
./Recalculate.cxx.save:	m_mHistograms[("NJet_pt25_c2"+bstr[b]).c_str()][channel]->Fill(m_oInput.NJet25, weight0);
./Recalculate.cxx.save:  		m_mHistograms[("Pt_jet1_c2"+bstr[b]).c_str()][channel]->Fill(m_oInput.Jets->at(0).Pt()/1000, weight0);
./Recalculate.cxx.save:  	    m_mHistograms[("Eta_jet1_c3"+bstr[b]).c_str()][channel]->Fill(m_oInput.Jets->at(0).Eta(), weight);
./Recalculate.cxx.save:  		m_mHistograms[("Pt_jet2_c2"+bstr[b]).c_str()][channel]->Fill(m_oInput.Jets->at(1).Pt()/1000, weight0);
./Recalculate.cxx.save:  		  m_mHistograms[("Eta_jet2_c3"+bstr[b]).c_str()][channel]->Fill(m_oInput.Jets->at(1).Eta(), weight);
./Recalculate.cxx.save:	m_mHistograms[("mu_c3"+bstr[b]).c_str()][channel]->Fill(m_oInput.mu,weight);
./Recalculate.cxx.save:	m_mHistograms[("nPV_3trks_c3"+bstr[b]).c_str()][channel]->Fill(m_oInput.nPV_3trks,weight);;
./Recalculate.cxx.save:	hist1->Fill(m_oInput.MET_final_Et/1000,weight);
./Recalculate.cxx.save:	hist2->Fill(m_oInput.MET_HPTO_Et/1000,weight);
./Recalculate.cxx.save:			m_mHistograms[("MetFinal_ee_mm_c4"+bstr[b]).c_str()][channel]->Fill(m_oInput.MET_final_Et/1000,weight);
./Recalculate.cxx.save:			m_mHistograms[("MetHPTO_ee_mm_c4"+bstr[b]).c_str()][channel]->Fill(m_oInput.MET_HPTO_Et/1000,weight);
./Recalculate.cxx.save:	m_mHistograms[("X1_c4"+bstr[b]).c_str()][channel]->Fill(m_oInput.Lep_x[0], weight);
./Recalculate.cxx.save:	m_mHistograms[("X2_c4"+bstr[b]).c_str()][channel]->Fill(m_oInput.Lep_x[1], weight);
./Recalculate.cxx.save:	m_mHistograms[("Pt_lep1_c4"+bstr[b]).c_str()][channel]->Fill(m_oInput.Lep_pt[0]/1000, weight);
./Recalculate.cxx.save:	m_mHistograms[("Pt_lep2_c4"+bstr[b]).c_str()][channel]->Fill(m_oInput.Lep_pt[1]/1000, weight);
./Recalculate.cxx.save:	m_mHistograms[("DeltaPhi_ll_c5"+bstr[b]).c_str()][channel]->Fill(m_oInput.DeltaPhi_ll, weight);
./Recalculate.cxx.save:	  m_mHistograms[("mu_c6"+bstr[b]).c_str()][channel]->Fill(m_oInput.mu,weight);
./Recalculate.cxx.save:	  m_mHistograms[("nPV_3trks_c6"+bstr[b]).c_str()][channel]->Fill(m_oInput.nPV_3trks,weight);;
./Recalculate.cxx.save:		m_mHistograms[("DeltaEta_jj_c7"+bstr[b]).c_str()][channel]->Fill(m_oInput.DeltaEta_jj, weight);
./Recalculate.cxx.save:		m_mHistograms[("Mass_jj_c7"+bstr[b]).c_str()][channel]->Fill(m_oInput.Mass_jj/1000, weight);
./Recalculate.cxx.save:		m_mHistograms[("Pt_tautau_c7c"+bstr[b]).c_str()][channel]->Fill(m_oInput.Pt_H/1000, weight);
./Recalculate.cxx.save:		m_mHistograms[("Mass_tautaujet_c7e"+bstr[b]).c_str()][channel]->Fill(m_oInput.Mass_Hj/1000, weight);
./Recalculate.cxx.save:  m_mHistograms["Colinear_ctau"][channel]->Fill(*m_oInput.ColinearMass/1000, weight0);
./Recalculate.cxx.save:  m_mHistograms["MMC_ctau"][channel]->Fill(*m_oInput.MmcMass/1000, weight0);
./Recalculate.cxx.save:    m_mHistograms["Colinear_sf_ctau"][channel]->Fill(*m_oInput.ColinearMass/1000, weight0);
./Recalculate.cxx.save:    m_mHistograms["MMC_sf_ctau"][channel]->Fill(*m_oInput.MmcMass/1000, weight0);
./Recalculate.cxx.save:    m_mHistograms["Colinear_df_ctau"][channel]->Fill(*m_oInput.ColinearMass/1000, weight0);
./Recalculate.cxx.save:    m_mHistograms["MMC_df_ctau"][channel]->Fill(*m_oInput.MmcMass/1000, weight0);
./Recalculate.cxx.save:			m_mHistograms["Mass_ee_ctau"][channel]->Fill(m_oInput.Mass_ll/1000, weight0);
./Recalculate.cxx.save:			m_mHistograms["Pt_lep1_ee_ctau"][channel]->Fill(m_oInput.Lep_pt[0]/1000, weight0);
./Recalculate.cxx.save:			m_mHistograms["Pt_lep2_ee_ctau"][channel]->Fill(m_oInput.Lep_pt[1]/1000, weight0);
./Recalculate.cxx.save:			m_mHistograms["MetFinal_ee_ctau"][channel]->Fill(m_oInput.MET_final_Et/1000, weight0);
./Recalculate.cxx.save:			m_mHistograms["MetHPTO_ee_ctau"][channel]->Fill(m_oInput.MET_HPTO_Et/1000, weight0);
./Recalculate.cxx.save:			m_mHistograms["X1_ee_ctau"][channel]->Fill(m_oInput.Lep_x[0], weight0);
./Recalculate.cxx.save:			m_mHistograms["X2_ee_ctau"][channel]->Fill(m_oInput.Lep_x[1], weight0);
./Recalculate.cxx.save:			m_mHistograms["DeltaPhi_ee_ctau"][channel]->Fill(m_oInput.DeltaPhi_ll, weight0);
./Recalculate.cxx.save:			m_mHistograms["Mass_emu_ctau"][channel]->Fill(m_oInput.Mass_ll/1000, weight0);
./Recalculate.cxx.save:			m_mHistograms["Pt_lep1_emu_ctau"][channel]->Fill(m_oInput.Lep_pt[0]/1000, weight0);
./Recalculate.cxx.save:			m_mHistograms["Pt_lep2_emu_ctau"][channel]->Fill(m_oInput.Lep_pt[1]/1000, weight0);
./Recalculate.cxx.save:			m_mHistograms["MetFinal_emu_ctau"][channel]->Fill(m_oInput.MET_final_Et/1000, weight0);
./Recalculate.cxx.save:			m_mHistograms["MetHPTO_emu_ctau"][channel]->Fill(m_oInput.MET_HPTO_Et/1000, weight0);
./Recalculate.cxx.save:			m_mHistograms["X1_emu_ctau"][channel]->Fill(m_oInput.Lep_x[0], weight0);
./Recalculate.cxx.save:			m_mHistograms["X2_emu_ctau"][channel]->Fill(m_oInput.Lep_x[1], weight0);
./Recalculate.cxx.save:			m_mHistograms["DeltaPhi_emu_ctau"][channel]->Fill(m_oInput.DeltaPhi_ll, weight0);
./Recalculate.cxx.save:			m_mHistograms["Mass_mumu_ctau"][channel]->Fill(m_oInput.Mass_ll/1000, weight0);
./Recalculate.cxx.save:			m_mHistograms["Pt_lep1_mumu_ctau"][channel]->Fill(m_oInput.Lep_pt[0]/1000, weight0);
./Recalculate.cxx.save:			m_mHistograms["Pt_lep2_mumu_ctau"][channel]->Fill(m_oInput.Lep_pt[1]/1000, weight0);
./Recalculate.cxx.save:			m_mHistograms["MetFinal_mumu_ctau"][channel]->Fill(m_oInput.MET_final_Et/1000, weight0);
./Recalculate.cxx.save:			m_mHistograms["MetHPTO_mumu_ctau"][channel]->Fill(m_oInput.MET_HPTO_Et/1000, weight0);
./Recalculate.cxx.save:			m_mHistograms["X1_mumu_ctau"][channel]->Fill(m_oInput.Lep_x[0], weight0);
./Recalculate.cxx.save:			m_mHistograms["X2_mumu_ctau"][channel]->Fill(m_oInput.Lep_x[1], weight0);
./Recalculate.cxx.save:			m_mHistograms["DeltaPhi_mumu_ctau"][channel]->Fill(m_oInput.DeltaPhi_ll, weight0);
./Recalculate.cxx.save://   htmp->SetFillStyle(h->GetFillStyle());
./Recalculate.cxx.save:   htmp->SetFillColor(h->GetFillColor());
./Output.cxx:  tree()->Fill();
./.svn/text-base/Muon.cxx.svn-base://  	sm_pSmearingTool->FillScales("KC");
./.svn/text-base/Input.cxx.svn-base:void wwwAnalysis::Output::FillLepton(int i, const PhysicsObject &lep)
./.svn/text-base/Input.cxx.svn-base:void wwwAnalysis::Output::Fill(const D3PDReader::Event &event, const PhysicsObject &lep1, const PhysicsObject &lep2,
./.svn/text-base/Input.cxx.svn-base:	//fill leptons
./.svn/text-base/Input.cxx.svn-base:	FillLepton(0,lep1);
./.svn/text-base/Input.cxx.svn-base:	FillLepton(1,lep2);
./.svn/text-base/Input.cxx.svn-base:	//fill jets
./.svn/text-base/Input.cxx.svn-base:	tree()->Fill();
./.svn/text-base/Recalculate.cxx.save.svn-base:			hist->SetFillColor(0);
./.svn/text-base/Recalculate.cxx.save.svn-base:	  m_pClone->Fill();
./.svn/text-base/Recalculate.cxx.save.svn-base:    m_pVBFClone->Fill();
./.svn/text-base/Recalculate.cxx.save.svn-base:    m_pVHClone->Fill();
./.svn/text-base/Recalculate.cxx.save.svn-base:    m_pBoostedClone->Fill();
./.svn/text-base/Recalculate.cxx.save.svn-base:    m_p1JetClone->Fill();
./.svn/text-base/Recalculate.cxx.save.svn-base://    m_p0JetClone->Fill();
./.svn/text-base/Recalculate.cxx.save.svn-base:      m_mHistograms["Mass_Hj_mva"][channel]->Fill(*m_oInput.Mass_Hj/1000, weight);
./.svn/text-base/Recalculate.cxx.save.svn-base:      m_mHistograms["DeltaR_ll_mva"][channel]->Fill(*m_oInput.DeltaR_ll, weight);
./.svn/text-base/Recalculate.cxx.save.svn-base:      m_mHistograms["Ratio_pt_mva"][channel]->Fill(*m_oInput.Lep_pt[0]/(*m_oInput.Lep_pt[1]), weight);
./.svn/text-base/Recalculate.cxx.save.svn-base:        m_mHistograms["Colinear_mva"][channel]->Fill(*m_oInput.ColinearMass/1000, weight);
./.svn/text-base/Recalculate.cxx.save.svn-base:        m_mHistograms["MMC_mva"][channel]->Fill(*m_oInput.MmcMass/1000, weight);
./.svn/text-base/Recalculate.cxx.save.svn-base:          m_mHistograms["Colinear_mva_df"][channel]->Fill(*m_oInput.ColinearMass/1000, weight);
./.svn/text-base/Recalculate.cxx.save.svn-base:          m_mHistograms["Colinear_mva_sf"][channel]->Fill(*m_oInput.ColinearMass/1000, weight);
./.svn/text-base/Recalculate.cxx.save.svn-base:      m_mHistograms["Mass_Hj_vbf"][channel]->Fill(*m_oInput.Mass_Hj/1000, weight);
./.svn/text-base/Recalculate.cxx.save.svn-base:      m_mHistograms["DeltaR_ll_vbf"][channel]->Fill(*m_oInput.DeltaR_ll, weight);
./.svn/text-base/Recalculate.cxx.save.svn-base:      m_mHistograms["Ratio_pt_vbf"][channel]->Fill(*m_oInput.Lep_pt[0]/(*m_oInput.Lep_pt[1]), weight);
./.svn/text-base/Recalculate.cxx.save.svn-base:        m_mHistograms["Colinear_vbf"][channel]->Fill(*m_oInput.ColinearMass/1000, weight);
./.svn/text-base/Recalculate.cxx.save.svn-base:        m_mHistograms["MMC_vbf"][channel]->Fill(*m_oInput.MmcMass/1000, weight);
./.svn/text-base/Recalculate.cxx.save.svn-base:          m_mHistograms["Colinear_vbf_df"][channel]->Fill(*m_oInput.ColinearMass/1000, weight);
./.svn/text-base/Recalculate.cxx.save.svn-base:          m_mHistograms["Colinear_vbf_sf"][channel]->Fill(*m_oInput.ColinearMass/1000, weight);
./.svn/text-base/Recalculate.cxx.save.svn-base:      m_mHistograms["Mass_Hj_boosted"][channel]->Fill(*m_oInput.Mass_Hj/1000, weight);
./.svn/text-base/Recalculate.cxx.save.svn-base:      m_mHistograms["DeltaR_ll_boosted"][channel]->Fill(*m_oInput.DeltaR_ll, weight);
./.svn/text-base/Recalculate.cxx.save.svn-base:      m_mHistograms["Ratio_pt_boosted"][channel]->Fill(*m_oInput.Lep_pt[0]/(*m_oInput.Lep_pt[1]), weight);
./.svn/text-base/Recalculate.cxx.save.svn-base:        m_mHistograms["Colinear_boosted"][channel]->Fill(*m_oInput.ColinearMass/1000, weight);
./.svn/text-base/Recalculate.cxx.save.svn-base:        m_mHistograms["MMC_boosted"][channel]->Fill(*m_oInput.MmcMass/1000, weight);
./.svn/text-base/Recalculate.cxx.save.svn-base:          m_mHistograms["Colinear_boosted_df"][channel]->Fill(*m_oInput.ColinearMass/1000, weight);
./.svn/text-base/Recalculate.cxx.save.svn-base:          m_mHistograms["Colinear_boosted_sf"][channel]->Fill(*m_oInput.ColinearMass/1000, weight);
./.svn/text-base/Recalculate.cxx.save.svn-base:      m_mHistograms["Mass_Hj_1jet"][channel]->Fill(*m_oInput.Mass_Hj/1000, weight);
./.svn/text-base/Recalculate.cxx.save.svn-base:      m_mHistograms["DeltaR_ll_1jet"][channel]->Fill(*m_oInput.DeltaR_ll, weight);
./.svn/text-base/Recalculate.cxx.save.svn-base:      m_mHistograms["Ratio_pt_1jet"][channel]->Fill(*m_oInput.Lep_pt[0]/(*m_oInput.Lep_pt[1]), weight);
./.svn/text-base/Recalculate.cxx.save.svn-base:        m_mHistograms["Colinear_1jet"][channel]->Fill(*m_oInput.ColinearMass/1000, weight);
./.svn/text-base/Recalculate.cxx.save.svn-base:        m_mHistograms["MMC_1jet"][channel]->Fill(*m_oInput.MmcMass/1000, weight);
./.svn/text-base/Recalculate.cxx.save.svn-base:          m_mHistograms["Colinear_1jet_df"][channel]->Fill(*m_oInput.ColinearMass/1000, weight);
./.svn/text-base/Recalculate.cxx.save.svn-base:          m_mHistograms["Colinear_1jet_sf"][channel]->Fill(*m_oInput.ColinearMass/1000, weight);
./.svn/text-base/Recalculate.cxx.save.svn-base:      m_mHistograms["Mass_Hj_0jet"][channel]->Fill(*m_oInput.Mass_Hj/1000, weight0);
./.svn/text-base/Recalculate.cxx.save.svn-base:      m_mHistograms["DeltaR_ll_0jet"][channel]->Fill(*m_oInput.DeltaR_ll, weight0);
./.svn/text-base/Recalculate.cxx.save.svn-base:      m_mHistograms["Ratio_pt_0jet"][channel]->Fill(*m_oInput.Lep_pt[0]/(*m_oInput.Lep_pt[1]), weight0);
./.svn/text-base/Recalculate.cxx.save.svn-base:        m_mHistograms["Colinear_0jet"][channel]->Fill(*m_oInput.ColinearMass/1000, weight0);
./.svn/text-base/Recalculate.cxx.save.svn-base:        m_mHistograms["MMC_0jet"][channel]->Fill(*m_oInput.MmcMass/1000, weight0);
./.svn/text-base/Recalculate.cxx.save.svn-base:          m_mHistograms["Colinear_0jet_df"][channel]->Fill(*m_oInput.ColinearMass/1000, weight0);
./.svn/text-base/Recalculate.cxx.save.svn-base:          m_mHistograms["Colinear_0jet_sf"][channel]->Fill(*m_oInput.ColinearMass/1000, weight0);
./.svn/text-base/Recalculate.cxx.save.svn-base:	      m_mHistograms[("test_Pt_lep"+suffixk).c_str()][channel]->Fill(*m_oInput.Lep_pt[k]/1000,w);
./.svn/text-base/Recalculate.cxx.save.svn-base:	      m_mHistograms[("test_Eta_lep"+suffixk).c_str()][channel]->Fill(*m_oInput.Lep_eta[k],w);
./.svn/text-base/Recalculate.cxx.save.svn-base:	      m_mHistograms[("test_Phi_lep"+suffixk).c_str()][channel]->Fill(*m_oInput.Lep_phi[k],w);
./.svn/text-base/Recalculate.cxx.save.svn-base:	        m_mHistograms[("test_Pt_jet"+suffixk).c_str()][channel]->Fill(*m_oInput.Jet_pt[k]/1000,w);
./.svn/text-base/Recalculate.cxx.save.svn-base:	        m_mHistograms[("test_Eta_jet"+suffixk).c_str()][channel]->Fill(*m_oInput.Jet_eta[k],w);
./.svn/text-base/Recalculate.cxx.save.svn-base:	        m_mHistograms[("test_Phi_jet"+suffixk).c_str()][channel]->Fill(*m_oInput.Jet_phi[k],w);
./.svn/text-base/Recalculate.cxx.save.svn-base:	    m_mHistograms[("test_Et_HPTO_MET_"+suffix).c_str()][channel]->Fill(*m_oInput.MET_HPTO_Et/1000,w);
./.svn/text-base/Recalculate.cxx.save.svn-base:	    m_mHistograms[("test_Ht_HPTO_MET_"+suffix).c_str()][channel]->Fill(ht/1000,w);
./.svn/text-base/Recalculate.cxx.save.svn-base:    	m_mHistograms[("test_Phi_HPTO_MET_"+suffix).c_str()][channel]->Fill(*m_oInput.MET_HPTO_phi,w);
./.svn/text-base/Recalculate.cxx.save.svn-base:  	m_mHistograms[("sumcos_db"+bstr[b]).c_str()][channel]->Fill(*m_oInput.SumCos, weight0);
./.svn/text-base/Recalculate.cxx.save.svn-base:	hist1->Fill((*m_oInput.Mass_ll)/1000, weight0);
./.svn/text-base/Recalculate.cxx.save.svn-base:	m_mHistograms[("mu_c1"+bstr[b]).c_str()][channel]->Fill(m_oInput.mu,weight0);
./.svn/text-base/Recalculate.cxx.save.svn-base:	m_mHistograms[("nPV_3trks_c1"+bstr[b]).c_str()][channel]->Fill(m_oInput.nPV_3trks,weight0);
./.svn/text-base/Recalculate.cxx.save.svn-base:		m_mHistograms[("DeltaPhi_em_c2d"+bstr[b]).c_str()][channel]->Fill(m_oInput.DeltaPhi_ll, weight0);
./.svn/text-base/Recalculate.cxx.save.svn-base:	m_mHistograms[("mu_c2"+bstr[b]).c_str()][channel]->Fill(m_oInput.mu,weight0);
./.svn/text-base/Recalculate.cxx.save.svn-base:	m_mHistograms[("nPV_3trks_c2"+bstr[b]).c_str()][channel]->Fill(m_oInput.nPV_3trks,weight0);
./.svn/text-base/Recalculate.cxx.save.svn-base:	m_mHistograms[("NJet_pt40_c2"+bstr[b]).c_str()][channel]->Fill(m_oInput.NJet40, weight0);
./.svn/text-base/Recalculate.cxx.save.svn-base:	m_mHistograms[("NJet_pt25_c2"+bstr[b]).c_str()][channel]->Fill(m_oInput.NJet25, weight0);
./.svn/text-base/Recalculate.cxx.save.svn-base:  		m_mHistograms[("Pt_jet1_c2"+bstr[b]).c_str()][channel]->Fill(m_oInput.Jets->at(0).Pt()/1000, weight0);
./.svn/text-base/Recalculate.cxx.save.svn-base:  	    m_mHistograms[("Eta_jet1_c3"+bstr[b]).c_str()][channel]->Fill(m_oInput.Jets->at(0).Eta(), weight);
./.svn/text-base/Recalculate.cxx.save.svn-base:  		m_mHistograms[("Pt_jet2_c2"+bstr[b]).c_str()][channel]->Fill(m_oInput.Jets->at(1).Pt()/1000, weight0);
./.svn/text-base/Recalculate.cxx.save.svn-base:  		  m_mHistograms[("Eta_jet2_c3"+bstr[b]).c_str()][channel]->Fill(m_oInput.Jets->at(1).Eta(), weight);
./.svn/text-base/Recalculate.cxx.save.svn-base:	m_mHistograms[("mu_c3"+bstr[b]).c_str()][channel]->Fill(m_oInput.mu,weight);
./.svn/text-base/Recalculate.cxx.save.svn-base:	m_mHistograms[("nPV_3trks_c3"+bstr[b]).c_str()][channel]->Fill(m_oInput.nPV_3trks,weight);;
./.svn/text-base/Recalculate.cxx.save.svn-base:	hist1->Fill(m_oInput.MET_final_Et/1000,weight);
./.svn/text-base/Recalculate.cxx.save.svn-base:	hist2->Fill(m_oInput.MET_HPTO_Et/1000,weight);
./.svn/text-base/Recalculate.cxx.save.svn-base:			m_mHistograms[("MetFinal_ee_mm_c4"+bstr[b]).c_str()][channel]->Fill(m_oInput.MET_final_Et/1000,weight);
./.svn/text-base/Recalculate.cxx.save.svn-base:			m_mHistograms[("MetHPTO_ee_mm_c4"+bstr[b]).c_str()][channel]->Fill(m_oInput.MET_HPTO_Et/1000,weight);
./.svn/text-base/Recalculate.cxx.save.svn-base:	m_mHistograms[("X1_c4"+bstr[b]).c_str()][channel]->Fill(m_oInput.Lep_x[0], weight);
./.svn/text-base/Recalculate.cxx.save.svn-base:	m_mHistograms[("X2_c4"+bstr[b]).c_str()][channel]->Fill(m_oInput.Lep_x[1], weight);
./.svn/text-base/Recalculate.cxx.save.svn-base:	m_mHistograms[("Pt_lep1_c4"+bstr[b]).c_str()][channel]->Fill(m_oInput.Lep_pt[0]/1000, weight);
./.svn/text-base/Recalculate.cxx.save.svn-base:	m_mHistograms[("Pt_lep2_c4"+bstr[b]).c_str()][channel]->Fill(m_oInput.Lep_pt[1]/1000, weight);
./.svn/text-base/Recalculate.cxx.save.svn-base:	m_mHistograms[("DeltaPhi_ll_c5"+bstr[b]).c_str()][channel]->Fill(m_oInput.DeltaPhi_ll, weight);
./.svn/text-base/Recalculate.cxx.save.svn-base:	  m_mHistograms[("mu_c6"+bstr[b]).c_str()][channel]->Fill(m_oInput.mu,weight);
./.svn/text-base/Recalculate.cxx.save.svn-base:	  m_mHistograms[("nPV_3trks_c6"+bstr[b]).c_str()][channel]->Fill(m_oInput.nPV_3trks,weight);;
./.svn/text-base/Recalculate.cxx.save.svn-base:		m_mHistograms[("DeltaEta_jj_c7"+bstr[b]).c_str()][channel]->Fill(m_oInput.DeltaEta_jj, weight);
./.svn/text-base/Recalculate.cxx.save.svn-base:		m_mHistograms[("Mass_jj_c7"+bstr[b]).c_str()][channel]->Fill(m_oInput.Mass_jj/1000, weight);
./.svn/text-base/Recalculate.cxx.save.svn-base:		m_mHistograms[("Pt_tautau_c7c"+bstr[b]).c_str()][channel]->Fill(m_oInput.Pt_H/1000, weight);
./.svn/text-base/Recalculate.cxx.save.svn-base:		m_mHistograms[("Mass_tautaujet_c7e"+bstr[b]).c_str()][channel]->Fill(m_oInput.Mass_Hj/1000, weight);
./.svn/text-base/Recalculate.cxx.save.svn-base:  m_mHistograms["Colinear_ctau"][channel]->Fill(*m_oInput.ColinearMass/1000, weight0);
./.svn/text-base/Recalculate.cxx.save.svn-base:  m_mHistograms["MMC_ctau"][channel]->Fill(*m_oInput.MmcMass/1000, weight0);
./.svn/text-base/Recalculate.cxx.save.svn-base:    m_mHistograms["Colinear_sf_ctau"][channel]->Fill(*m_oInput.ColinearMass/1000, weight0);
./.svn/text-base/Recalculate.cxx.save.svn-base:    m_mHistograms["MMC_sf_ctau"][channel]->Fill(*m_oInput.MmcMass/1000, weight0);
./.svn/text-base/Recalculate.cxx.save.svn-base:    m_mHistograms["Colinear_df_ctau"][channel]->Fill(*m_oInput.ColinearMass/1000, weight0);
./.svn/text-base/Recalculate.cxx.save.svn-base:    m_mHistograms["MMC_df_ctau"][channel]->Fill(*m_oInput.MmcMass/1000, weight0);
./.svn/text-base/Recalculate.cxx.save.svn-base:			m_mHistograms["Mass_ee_ctau"][channel]->Fill(m_oInput.Mass_ll/1000, weight0);
./.svn/text-base/Recalculate.cxx.save.svn-base:			m_mHistograms["Pt_lep1_ee_ctau"][channel]->Fill(m_oInput.Lep_pt[0]/1000, weight0);
./.svn/text-base/Recalculate.cxx.save.svn-base:			m_mHistograms["Pt_lep2_ee_ctau"][channel]->Fill(m_oInput.Lep_pt[1]/1000, weight0);
./.svn/text-base/Recalculate.cxx.save.svn-base:			m_mHistograms["MetFinal_ee_ctau"][channel]->Fill(m_oInput.MET_final_Et/1000, weight0);
./.svn/text-base/Recalculate.cxx.save.svn-base:			m_mHistograms["MetHPTO_ee_ctau"][channel]->Fill(m_oInput.MET_HPTO_Et/1000, weight0);
./.svn/text-base/Recalculate.cxx.save.svn-base:			m_mHistograms["X1_ee_ctau"][channel]->Fill(m_oInput.Lep_x[0], weight0);
./.svn/text-base/Recalculate.cxx.save.svn-base:			m_mHistograms["X2_ee_ctau"][channel]->Fill(m_oInput.Lep_x[1], weight0);
./.svn/text-base/Recalculate.cxx.save.svn-base:			m_mHistograms["DeltaPhi_ee_ctau"][channel]->Fill(m_oInput.DeltaPhi_ll, weight0);
./.svn/text-base/Recalculate.cxx.save.svn-base:			m_mHistograms["Mass_emu_ctau"][channel]->Fill(m_oInput.Mass_ll/1000, weight0);
./.svn/text-base/Recalculate.cxx.save.svn-base:			m_mHistograms["Pt_lep1_emu_ctau"][channel]->Fill(m_oInput.Lep_pt[0]/1000, weight0);
./.svn/text-base/Recalculate.cxx.save.svn-base:			m_mHistograms["Pt_lep2_emu_ctau"][channel]->Fill(m_oInput.Lep_pt[1]/1000, weight0);
./.svn/text-base/Recalculate.cxx.save.svn-base:			m_mHistograms["MetFinal_emu_ctau"][channel]->Fill(m_oInput.MET_final_Et/1000, weight0);
./.svn/text-base/Recalculate.cxx.save.svn-base:			m_mHistograms["MetHPTO_emu_ctau"][channel]->Fill(m_oInput.MET_HPTO_Et/1000, weight0);
./.svn/text-base/Recalculate.cxx.save.svn-base:			m_mHistograms["X1_emu_ctau"][channel]->Fill(m_oInput.Lep_x[0], weight0);
./.svn/text-base/Recalculate.cxx.save.svn-base:			m_mHistograms["X2_emu_ctau"][channel]->Fill(m_oInput.Lep_x[1], weight0);
./.svn/text-base/Recalculate.cxx.save.svn-base:			m_mHistograms["DeltaPhi_emu_ctau"][channel]->Fill(m_oInput.DeltaPhi_ll, weight0);
./.svn/text-base/Recalculate.cxx.save.svn-base:			m_mHistograms["Mass_mumu_ctau"][channel]->Fill(m_oInput.Mass_ll/1000, weight0);
./.svn/text-base/Recalculate.cxx.save.svn-base:			m_mHistograms["Pt_lep1_mumu_ctau"][channel]->Fill(m_oInput.Lep_pt[0]/1000, weight0);
./.svn/text-base/Recalculate.cxx.save.svn-base:			m_mHistograms["Pt_lep2_mumu_ctau"][channel]->Fill(m_oInput.Lep_pt[1]/1000, weight0);
./.svn/text-base/Recalculate.cxx.save.svn-base:			m_mHistograms["MetFinal_mumu_ctau"][channel]->Fill(m_oInput.MET_final_Et/1000, weight0);
./.svn/text-base/Recalculate.cxx.save.svn-base:			m_mHistograms["MetHPTO_mumu_ctau"][channel]->Fill(m_oInput.MET_HPTO_Et/1000, weight0);
./.svn/text-base/Recalculate.cxx.save.svn-base:			m_mHistograms["X1_mumu_ctau"][channel]->Fill(m_oInput.Lep_x[0], weight0);
./.svn/text-base/Recalculate.cxx.save.svn-base:			m_mHistograms["X2_mumu_ctau"][channel]->Fill(m_oInput.Lep_x[1], weight0);
./.svn/text-base/Recalculate.cxx.save.svn-base:			m_mHistograms["DeltaPhi_mumu_ctau"][channel]->Fill(m_oInput.DeltaPhi_ll, weight0);
./.svn/text-base/Recalculate.cxx.save.svn-base:   // Fill the new hitogram including the extra bin for overflows
./.svn/text-base/Recalculate.cxx.save.svn-base:   // FillStyle and color
./.svn/text-base/Recalculate.cxx.save.svn-base://   htmp->SetFillStyle(h->GetFillStyle());
./.svn/text-base/Recalculate.cxx.save.svn-base:   htmp->SetFillColor(h->GetFillColor());
./.svn/text-base/TestFakes.cxx.save.svn-base:      m_mHistograms[("difake_mll_"+name).c_str()][channel]->Fill(mass/1000.0, weight);
./.svn/text-base/TestFakes.cxx.save.svn-base:      m_mHistograms[("fake_mll_"+name).c_str()][channel]->Fill(mass/1000.0, weight);
./.svn/text-base/TestFakes.cxx.save.svn-base:	  m_mHistograms[("zll_"+name).c_str()][channel]->Fill((*m_oInput.Lep_pt[1])/1000.0, weight);
./.svn/text-base/TestFakes.cxx.save.svn-base:	  m_mHistograms[("zll_"+name).c_str()][channel]->Fill((*m_oInput.Lep_pt[1])/1000.0, weight);
./.svn/text-base/TestFakes.cxx.save.svn-base:	  m_mHistograms[("fake_"+name).c_str()][channel]->Fill((*m_oInput.Lep_pt[1])/1000.0, weight);
./.svn/text-base/Analysis.cxx.svn-base:const Root::TAccept &wwwAnalysis :: Analysis :: fillCutFlow(TH1 *hist, const Root::TAccept &accept, double weight)
./.svn/text-base/Analysis.cxx.svn-base:  //Fill cutflow histogram
./.svn/text-base/Analysis.cxx.svn-base:	hist->Fill(accept.getCutName(i).Data(), weight);
./.svn/text-base/Analysis.cxx.svn-base:void wwwAnalysis :: Analysis :: fillCutFlows(int index, const Root::TAccept &pass, double mc, double sf, double pu, double btag, double trig, double xsec)
./.svn/text-base/Analysis.cxx.svn-base:	fillCutFlow(m_vCutFlowEvents[index], pass, weight *= mc);
./.svn/text-base/Analysis.cxx.svn-base:	fillCutFlow(m_vCutFlowEventsLepLep[index], pass, weight *= sf);
./.svn/text-base/Analysis.cxx.svn-base:	fillCutFlow(m_vCutFlowEventsLepLepPu[index], pass, weight *= pu);
./.svn/text-base/Analysis.cxx.svn-base:	fillCutFlow(m_vCutFlowEventsLepLepPuBTag[index], pass, weight *= btag);
./.svn/text-base/Analysis.cxx.svn-base:	fillCutFlow(m_vCutFlowEventsLepLepPuBTagTrig[index], pass, weight *= trig);
./.svn/text-base/Analysis.cxx.svn-base:	fillCutFlow(m_vCutFlowEventsLepLepPuBTagTrigXSec[index], pass, weight *= xsec);
./.svn/text-base/Analysis.cxx.svn-base:void wwwAnalysis :: Analysis :: fillCutFlows(const char *bin, double weight)
./.svn/text-base/Analysis.cxx.svn-base:  	m_vCutFlowEvents[i]->Fill(bin, weight);
./.svn/text-base/Analysis.cxx.svn-base:  // apply cuts, and then fill histograms and n-tuples
./.svn/text-base/Analysis.cxx.svn-base:  //Fill in raw PhysicsObjects
./.svn/text-base/Analysis.cxx.svn-base:  m_pCutFlowElectrons->Fill("Raw", m_pEvent->el.n());
./.svn/text-base/Analysis.cxx.svn-base:  //m_pCutFlowMuons->Fill("Raw", m_pEvent->mu.n());
./.svn/text-base/Analysis.cxx.svn-base:  m_pCutFlowMuons->Fill("Raw", m_pEvent->mu_staco.n());
./.svn/text-base/Analysis.cxx.svn-base:  m_pCutFlowTaus->Fill("Raw", m_pEvent->tau.n());
./.svn/text-base/Analysis.cxx.svn-base://  m_pCutFlowJets->Fill("Raw", m_pEvent->jet.n());
./.svn/text-base/Analysis.cxx.svn-base:    m_pCutFlowJets->Fill("Raw", m_pEvent->jet_AntiKt4LCTopo.n());
./.svn/text-base/Analysis.cxx.svn-base:    fillCutFlow(m_pCutFlowMuons, pass);
./.svn/text-base/Analysis.cxx.svn-base:    fillCutFlow(m_pCutFlowElectrons, pass);
./.svn/text-base/Analysis.cxx.svn-base:    fillCutFlow(m_pCutFlowTaus,pass);
./.svn/text-base/Analysis.cxx.svn-base:    fillCutFlow(m_pCutFlowJets, pass);
./.svn/text-base/Analysis.cxx.svn-base:  fillCutFlows("Raw",mcWeight);
./.svn/text-base/Analysis.cxx.svn-base:   	fillCutFlows("GRL",mcWeight);
./.svn/text-base/Analysis.cxx.svn-base:	  fillCutFlows(i, eventpass, mcWeight, sfWeight, puWeight, btagWeight, trigWeight, xsecWeight);
./.svn/text-base/Analysis.cxx.svn-base:	  //fillCutFlows(i, eventpass, 1., sfWeight, puWeight, btagWeight, trigWeight, xsecWeight);
./.svn/text-base/Analysis.cxx.svn-base:      m_pOut[m_vEventSelectorNames[save[i]]]->Fill(*m_pEvent, init, final, lumi, nPV_2trks, nPV_3trks, btag, m_fMu,
./.svn/text-base/Output.cxx.svn-base:void wwwAnalysis::Output::FillLepton(int i, const PhysicsObject *lep)
./.svn/text-base/Output.cxx.svn-base:void wwwAnalysis::Output::Fill(const D3PDReader::Event &event, InitialState init, FinalState final, double lumi,
./.svn/text-base/Output.cxx.svn-base:	//fill leptons
./.svn/text-base/Output.cxx.svn-base:	FillLepton(0,lep1);
./.svn/text-base/Output.cxx.svn-base:	FillLepton(1,lep2);
./.svn/text-base/Output.cxx.svn-base:	FillLepton(2,lep3);
./.svn/text-base/Output.cxx.svn-base:	//fill jets
./.svn/text-base/Output.cxx.svn-base:  tree()->Fill();
./.svn/text-base/PlotMaker.cxx.svn-base:	hist->SetFillColor(vMCColors[histnum]);
./.svn/text-base/PlotMaker.cxx.svn-base:	hist->SetFillColor(0);//Signal should be drawn with empty fill
./.svn/text-base/PlotMaker.cxx.svn-base:  	leg->SetFillColor(0);
./.svn/text-base/PlotMaker.cxx.svn-base:	denominator->SetFillColor(0);
./.svn/text-base/PlotMaker.cxx.svn-base:	numerator->SetFillColor(0);
./.svn/text-base/PlotMaker.cxx.svn-base:  	leg->SetFillColor(0);
./.svn/text-base/PlotMaker.cxx.svn-base:				mccat.back()->SetFillColor(vCategoryColors[i]);
./.svn/text-base/PlotMaker.cxx.svn-base:				signalcat.back()->SetFillColor(0);
./.svn/text-base/NormalizeFakes.cxx.save.svn-base:      m_mHistograms[("test_mll_c2_"+name3).c_str()][channel]->Fill(mass/1000.0, weight);
./.svn/text-base/NormalizeFakes.cxx.save.svn-base:      m_mHistograms[("test_met_c2_"+name3).c_str()][channel]->Fill((*m_oInput.MET_HPTO_Et)/1000.0, weight);
./.svn/text-base/NormalizeFakes.cxx.save.svn-base:      m_mHistograms[("test_ptl1_c2_"+name3).c_str()][channel]->Fill(*(m_oInput.Lep_pt[0])/1000.0, weight);
./.svn/text-base/NormalizeFakes.cxx.save.svn-base:      m_mHistograms[("test_ptl2_c2_"+name3).c_str()][channel]->Fill(*(m_oInput.Lep_pt[1])/1000.0, weight);
./.svn/text-base/NormalizeFakes.cxx.save.svn-base:      m_mHistograms[("test_x1_c2_"+name3).c_str()][channel]->Fill(*(m_oInput.Lep_x[0]), weight);
./.svn/text-base/NormalizeFakes.cxx.save.svn-base:      m_mHistograms[("test_x2_c2_"+name3).c_str()][channel]->Fill(*(m_oInput.Lep_x[1]), weight);
./.svn/text-base/NormalizeFakes.cxx.save.svn-base:      m_mHistograms[("test_dphill_c2_"+name3).c_str()][channel]->Fill(*(m_oInput.DeltaPhi_ll), weight);
./.svn/text-base/NormalizeFakes.cxx.save.svn-base:      m_mHistograms[("test_detall_c2_"+name3).c_str()][channel]->Fill(*(m_oInput.DeltaEta_ll), weight);
./.svn/text-base/NormalizeFakes.cxx.save.svn-base:      m_mHistograms[("test_ptH_c2_"+name3).c_str()][channel]->Fill(*(m_oInput.Pt_H)/1000.0, weight);
./.svn/text-base/NormalizeFakes.cxx.save.svn-base:      m_mHistograms[("Ht_"+name3).c_str()][channel]->Fill(ht/1000.0, weight);
./.svn/text-base/NormalizeFakes.cxx.save.svn-base:      m_mHistograms[("sumcos_"+name3).c_str()][channel]->Fill(sumcos, weight);
./.svn/text-base/NormalizeFakes.cxx.save.svn-base:        m_mHistograms[("zll_fit_"+name3).c_str()][channel]->Fill(pt, weight);
./.svn/text-base/NormalizeFakes.cxx.save.svn-base://        m_mHistograms[("top_fit_"+name3).c_str()][channel]->Fill(pt, weight);
./.svn/text-base/NormalizeFakes.cxx.save.svn-base:        m_mHistograms[("top_fit_"+name3).c_str()][channel]->Fill(pt, weight);
./.svn/text-base/NormalizeFakes.cxx.save.svn-base:        m_mHistograms[("ztautau_fit_"+name3).c_str()][channel]->Fill(pt, weight);
./.svn/text-base/NormalizeFakes.cxx.save.svn-base:        m_mHistograms[("ztautau_fit_"+name3).c_str()][channel]->Fill(pt, weight);
./.svn/text-base/NormalizeFakes.cxx.save.svn-base:        m_mHistograms[("zll_fit_"+name3).c_str()][channel]->Fill(pt, weight);
./.svn/text-base/NormalizeFakes.cxx.save.svn-base:        m_mHistograms[("top_fit_"+name3).c_str()][channel]->Fill(pt, weight);
./.svn/text-base/NormalizeFakes.cxx.save.svn-base:        m_mHistograms[("ztautau_fit_"+name3).c_str()][channel]->Fill(pt, weight);
./.svn/text-base/NormalizeFakes.cxx.save.svn-base:        m_mHistograms[("ztautau_fit_"+name3).c_str()][channel]->Fill(pt, weight);
./.svn/text-base/NormalizeFakes.cxx.save.svn-base:    m_mHistograms[("zll2_fit_"+name3).c_str()][channel]->Fill(pt, weight);
./.svn/text-base/NormalizeFakes.cxx.save.svn-base:    m_mHistograms[("top2_fit_"+name3).c_str()][channel]->Fill(pt, weight);
./.svn/text-base/NormalizeFakes.cxx.save.svn-base:    m_mHistograms[("top2_fit_"+name3).c_str()][channel]->Fill(pt, weight);
./.svn/text-base/NormalizeFakes.cxx.save.svn-base:    m_mHistograms[("top3_fit_"+name3).c_str()][channel]->Fill(pt, weight);
./.svn/text-base/NormalizeFakes.cxx.save.svn-base:    m_mHistograms[("diboson_fit_"+name3).c_str()][channel]->Fill(pt, weight);
./.svn/text-base/NormalizeFakes.cxx.save.svn-base://    m_mHistograms[("diboson_fit_"+name3).c_str()][channel]->Fill(pt, weight);
./.svn/text-base/NormalizeFakes.cxx.save.svn-base://    m_mHistograms[("diboson_fit_"+name2).c_str()][channel]->Fill((*m_oInput.Lep_pt[1])/1000.0, weight);
./.svn/text-base/NormalizeFakes.cxx.save.svn-base:    m_mHistograms[("zll_"+namej).c_str()][channel]->Fill((*m_oInput.Lep_pt[1])/1000.0, weight);
./.svn/text-base/NormalizeFakes.cxx.save.svn-base:    m_mHistograms[("zll_fit_"+name).c_str()][channel]->Fill((*m_oInput.Lep_pt[1])/1000.0, weight);
./.svn/text-base/NormalizeFakes.cxx.save.svn-base:    m_mHistograms[("top_"+namej).c_str()][channel]->Fill((*m_oInput.Lep_pt[1])/1000.0, weight);
./.svn/text-base/NormalizeFakes.cxx.save.svn-base:      m_mHistograms[("top_fit_"+name).c_str()][channel]->Fill((*m_oInput.Lep_pt[1])/1000.0, weight);
./.svn/text-base/NormalizeFakes.cxx.save.svn-base:      m_mHistograms[("top_fit_"+name).c_str()][channel]->Fill((*m_oInput.Lep_pt[1])/1000.0, weight);
./.svn/text-base/NormalizeFakes.cxx.save.svn-base:      m_mHistograms[("top_fit_"+name).c_str()][channel]->Fill((*m_oInput.Lep_pt[1])/1000.0, weight);
./.svn/text-base/NormalizeFakes.cxx.save.svn-base:      m_mHistograms[("fake_"+name).c_str()][channel]->Fill(pt, weight);
./.svn/text-base/NormalizeFakes.cxx.save.svn-base:        m_mHistograms[("fake_"+name2).c_str()][channel]->Fill(pt, weight);
./Analysis.cxx:	hist->Fill(accept.getCutName(i).Data(), weight);
./Analysis.cxx:  	m_vCutFlowEvents[i]->Fill(bin, weight);
./Analysis.cxx:  // apply cuts, and then fill histograms and n-tuples
./Analysis.cxx:  m_pCutFlowElectrons->Fill("Raw", m_pEvent->el.n());
./Analysis.cxx:  //m_pCutFlowMuons->Fill("Raw", m_pEvent->mu.n());
./Analysis.cxx:  m_pCutFlowMuons->Fill("Raw", m_pEvent->mu_staco.n());
./Analysis.cxx:  m_pCutFlowTaus->Fill("Raw", m_pEvent->tau.n());
./Analysis.cxx://  m_pCutFlowJets->Fill("Raw", m_pEvent->jet.n());
./Analysis.cxx:    m_pCutFlowJets->Fill("Raw", m_pEvent->jet_AntiKt4LCTopo.n());
./Analysis.cxx:      m_pOut[m_vEventSelectorNames[save[i]]]->Fill(*m_pEvent, init, final, lumi, nPV_2trks, nPV_3trks, btag, m_fMu,
./Muon.cxx://  	sm_pSmearingTool->FillScales("KC");
./Input.cxx:	tree()->Fill();
./NormalizeFakes.cxx.save:      m_mHistograms[("test_mll_c2_"+name3).c_str()][channel]->Fill(mass/1000.0, weight);
./NormalizeFakes.cxx.save:      m_mHistograms[("test_met_c2_"+name3).c_str()][channel]->Fill((*m_oInput.MET_HPTO_Et)/1000.0, weight);
./NormalizeFakes.cxx.save:      m_mHistograms[("test_ptl1_c2_"+name3).c_str()][channel]->Fill(*(m_oInput.Lep_pt[0])/1000.0, weight);
./NormalizeFakes.cxx.save:      m_mHistograms[("test_ptl2_c2_"+name3).c_str()][channel]->Fill(*(m_oInput.Lep_pt[1])/1000.0, weight);
./NormalizeFakes.cxx.save:      m_mHistograms[("test_x1_c2_"+name3).c_str()][channel]->Fill(*(m_oInput.Lep_x[0]), weight);
./NormalizeFakes.cxx.save:      m_mHistograms[("test_x2_c2_"+name3).c_str()][channel]->Fill(*(m_oInput.Lep_x[1]), weight);
./NormalizeFakes.cxx.save:      m_mHistograms[("test_dphill_c2_"+name3).c_str()][channel]->Fill(*(m_oInput.DeltaPhi_ll), weight);
./NormalizeFakes.cxx.save:      m_mHistograms[("test_detall_c2_"+name3).c_str()][channel]->Fill(*(m_oInput.DeltaEta_ll), weight);
./NormalizeFakes.cxx.save:      m_mHistograms[("test_ptH_c2_"+name3).c_str()][channel]->Fill(*(m_oInput.Pt_H)/1000.0, weight);
./NormalizeFakes.cxx.save:      m_mHistograms[("Ht_"+name3).c_str()][channel]->Fill(ht/1000.0, weight);
./NormalizeFakes.cxx.save:      m_mHistograms[("sumcos_"+name3).c_str()][channel]->Fill(sumcos, weight);
./NormalizeFakes.cxx.save:        m_mHistograms[("zll_fit_"+name3).c_str()][channel]->Fill(pt, weight);
./NormalizeFakes.cxx.save://        m_mHistograms[("top_fit_"+name3).c_str()][channel]->Fill(pt, weight);
./NormalizeFakes.cxx.save:        m_mHistograms[("top_fit_"+name3).c_str()][channel]->Fill(pt, weight);
./NormalizeFakes.cxx.save:        m_mHistograms[("ztautau_fit_"+name3).c_str()][channel]->Fill(pt, weight);
./NormalizeFakes.cxx.save:        m_mHistograms[("ztautau_fit_"+name3).c_str()][channel]->Fill(pt, weight);
./NormalizeFakes.cxx.save:        m_mHistograms[("zll_fit_"+name3).c_str()][channel]->Fill(pt, weight);
./NormalizeFakes.cxx.save:        m_mHistograms[("top_fit_"+name3).c_str()][channel]->Fill(pt, weight);
./NormalizeFakes.cxx.save:        m_mHistograms[("ztautau_fit_"+name3).c_str()][channel]->Fill(pt, weight);
./NormalizeFakes.cxx.save:        m_mHistograms[("ztautau_fit_"+name3).c_str()][channel]->Fill(pt, weight);
./NormalizeFakes.cxx.save:    m_mHistograms[("zll2_fit_"+name3).c_str()][channel]->Fill(pt, weight);
./NormalizeFakes.cxx.save:    m_mHistograms[("top2_fit_"+name3).c_str()][channel]->Fill(pt, weight);
./NormalizeFakes.cxx.save:    m_mHistograms[("top2_fit_"+name3).c_str()][channel]->Fill(pt, weight);
./NormalizeFakes.cxx.save:    m_mHistograms[("top3_fit_"+name3).c_str()][channel]->Fill(pt, weight);
./NormalizeFakes.cxx.save:    m_mHistograms[("diboson_fit_"+name3).c_str()][channel]->Fill(pt, weight);
./NormalizeFakes.cxx.save://    m_mHistograms[("diboson_fit_"+name3).c_str()][channel]->Fill(pt, weight);
./NormalizeFakes.cxx.save://    m_mHistograms[("diboson_fit_"+name2).c_str()][channel]->Fill((*m_oInput.Lep_pt[1])/1000.0, weight);
./NormalizeFakes.cxx.save:    m_mHistograms[("zll_"+namej).c_str()][channel]->Fill((*m_oInput.Lep_pt[1])/1000.0, weight);
./NormalizeFakes.cxx.save:    m_mHistograms[("zll_fit_"+name).c_str()][channel]->Fill((*m_oInput.Lep_pt[1])/1000.0, weight);
./NormalizeFakes.cxx.save:    m_mHistograms[("top_"+namej).c_str()][channel]->Fill((*m_oInput.Lep_pt[1])/1000.0, weight);
./NormalizeFakes.cxx.save:      m_mHistograms[("top_fit_"+name).c_str()][channel]->Fill((*m_oInput.Lep_pt[1])/1000.0, weight);
./NormalizeFakes.cxx.save:      m_mHistograms[("top_fit_"+name).c_str()][channel]->Fill((*m_oInput.Lep_pt[1])/1000.0, weight);
./NormalizeFakes.cxx.save:      m_mHistograms[("top_fit_"+name).c_str()][channel]->Fill((*m_oInput.Lep_pt[1])/1000.0, weight);
./NormalizeFakes.cxx.save:      m_mHistograms[("fake_"+name).c_str()][channel]->Fill(pt, weight);
./NormalizeFakes.cxx.save:        m_mHistograms[("fake_"+name2).c_str()][channel]->Fill(pt, weight);
./PlotMaker.cxx:	hist->SetFillColor(vMCColors[histnum]);
./PlotMaker.cxx:	hist->SetFillColor(0);//Signal should be drawn with empty fill
./PlotMaker.cxx:  	leg->SetFillColor(0);
./PlotMaker.cxx:	denominator->SetFillColor(0);
./PlotMaker.cxx:	numerator->SetFillColor(0);
./PlotMaker.cxx:  	leg->SetFillColor(0);
./PlotMaker.cxx:				mccat.back()->SetFillColor(vCategoryColors[i]);
./PlotMaker.cxx:				signalcat.back()->SetFillColor(0);
